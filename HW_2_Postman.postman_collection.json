{
	"info": {
		"_postman_id": "de568d6c-a18f-4fa1-b9a9-1bc13f9c09e6",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "One",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Проверить, что в body приходит правильный string",
							"var resp = pm.response.text()",
							"pm.test('В body приходит правильный string', function (){",
							"pm.expect(resp).to.include('This is the first responce from server!ss')",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Two",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"     pm.response.to.have.status(200);",
							" })",
							" // Спарсить response body в json",
							" var resp = pm.response.json();",
							" // Проверить, что name в ответе равно name из запроса (name вбить руками)",
							" pm.test ('response.name = request.name', function () {",
							"     pm.expect(resp.name).to.eql('Ivan')",
							" })",
							" // Проверить, что age в ответе равно age из запроса (age вбить руками)",
							" pm.test ('response.age = request.age', function () {",
							"     pm.expect(+resp.age).to.eql(26)",
							" })",
							" // Проверить, что salary в ответе равно salary из запроса (salary вбить руками)",
							" pm.test ('response.salary = request.salary', function () {",
							"     pm.expect(resp.salary).to.eql(700)",
							" })",
							" // Спарсить request",
							" var req = request.data;",
							" // Проверить, что name в ответе равно name из запроса (name забрать из request)",
							" pm.test('response.name = request.name', function() {",
							"     pm.expect(resp.name).to.eql(req.name)",
							" })",
							" // Проверить, что age в ответе равно age из запроса (age забрать из request)",
							" pm.test('response.age = request.age', function () {",
							"     pm.expect(resp.age).to.eql(req.age)",
							" })",
							" // Проверить, что salary в ответе равно salary из запроса (salary забрать из request)",
							" pm.test('response.salary = request.salary', function () {",
							"     pm.expect(resp.salary).to.eql(+req.salary)",
							" })",
							" // Вывести в консоль параметр family из response",
							" console.log(resp.family)",
							" // Проверить, что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							" pm.test('response.u_salary_1_5_year = request.salary*4', function() {",
							"     pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4)",
							" })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ivan",
							"type": "default"
						},
						{
							"key": "age",
							"value": "26",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "700",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Three",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"// Спарсить response body в json",
							"var resp = pm.response.json()",
							"// Спарсить request",
							"var req = pm.request.url.query.toObject();",
							"// Проверить, что name в ответе равно name из запроса (name забрать из request)",
							"pm.test('response.name = request.name', function () {",
							"    pm.expect(resp.name).to.eql(req.name)",
							"})",
							"// Проверить, что age в ответе равно age из запроса (age забрать из request)",
							"pm.test('response.age = request.age', function () {",
							"    pm.expect(resp.age).to.eql(req.age)",
							"})",
							"// Проверить, что salary в ответе равно salary из запроса (salary забрать из request)",
							"pm.test('response.salary = request.salary', function () {",
							"    pm.expect(resp.salary).to.eql(+req.salary)",
							"})",
							"// Вывести в консоль параметр family из response",
							"console.log(resp.family)",
							"// Проверить, что у параметра dog есть параметры name",
							"pm.test('param \"dog\" have key \"name\"', function () {",
							"    pm.expect(resp.family.pets.dog).ownProperty(\"name\")",
							"})",
							"// Проверить, что у параметра dog есть параметры age",
							"pm.test('param \"dog\" have key \"age\"', function () {",
							"    pm.expect(resp.family.pets.dog).ownProperty(\"age\")",
							"})",
							"// Проверить, что параметр name имеет значение Luky",
							"pm.test('param \"name\" have value \"Luky\"', function () {",
							"    pm.expect(resp.family.pets.dog.name).to.eql(\"Luky\")",
							"})",
							"// Проверить, что параметр age имеет значение 4",
							"pm.test('param \"age\" have value \"4\"', function () {",
							"    pm.expect(resp.family.pets.dog.age).to.eql(4)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Ivan&age=26&salary=700",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "For",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200)",
							"})",
							"// Спарсить response body в json",
							"var resp = pm.response.json()",
							"// Спарсить request",
							"var req = pm.request.url.query.toObject()",
							"// Проверить, что name в ответе равно name из запроса (name забрать из request)",
							"pm.test('response.name = request.name', function () {",
							"    pm.expect(resp.name).to.eql(req.name)",
							"})",
							"// Проверить, что age в ответе равно age из запроса (age забрать из request)",
							"pm.test('response.age = request.age', function () {",
							"    pm.expect(resp.age).to.eql(+req.age)",
							"})",
							"// Вывести в консоль параметр salary из request",
							"console.log(req.salary)",
							"// Вывести в консоль параметр salary из response",
							"console.log(resp.salary)",
							"// Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(resp.salary[0])",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"console.log(resp.salary[1])",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response",
							"console.log(resp.salary[2])",
							"// Проверить, что 0-й элемент параметра salary равен salary из запроса (salary забрать из request)",
							"pm.test('response.salary[0] = request.salary', function () {",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary)",
							"})",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из запроса (salary забрать из request) т.к. есть * , то не обязательно в начале ставить + , чтобы сделать тип number.",
							"pm.test('response.salary[1] = request.salary*2', function () {",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2)",
							"})",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из запроса (salary забрать из request)",
							"pm.test('response.salary[2] = request.salary*3', function () {",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3)",
							"})",
							"// Создать в окружении переменную name",
							"// Создать в окружении переменную age",
							"// Создать в окружении переменную salary",
							"// Передать в окружение переменную name",
							"pm.environment.set('name', resp.name)",
							"// Передать в окружение переменную age",
							"pm.environment.set('age', resp.age)",
							"// Передать в окружение переменную salary",
							"pm.environment.set('salary', resp.salary[0])",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary",
							"Object.values(resp.salary).forEach((el) => {",
							"    console.log(el)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Ivan&age=26&salary=700",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Five",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request",
							"// Вставить параметр age из окружения в age",
							"// Вставить параметр name из окружения в name",
							"// Отправить запрос",
							"",
							"// Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"     pm.response.to.have.status(200);",
							" })",
							" // Спарсить response body в json",
							" var resp = pm.response.json()",
							" // Спарсить request",
							" var req = request.data",
							" // Проверить, что json response имеет параметр start_qa_salary",
							"pm.test('response have param \"start_qa_salary\"', function () {",
							"     pm.expect(resp).ownProperty(\"start_qa_salary\")",
							" })",
							" // Проверить, что json response имеет параметр qa_salary_after_6_months",
							" pm.test('response have param \"qa_salary_after_6_months\"', function () {",
							"     pm.expect(resp).ownProperty(\"qa_salary_after_6_months\")",
							" })",
							" // Проверить, что json response имеет параметр qa_salary_after_12_months",
							" pm.test('response have param \"qa_salary_after_12_months\"', function () {",
							"     pm.expect(resp).ownProperty(\"qa_salary_after_12_months\")",
							" })",
							" // Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							" pm.test('response have param \"qa_salary_after_1.5_year\"', function () {",
							"     pm.expect(resp).ownProperty(\"qa_salary_after_1.5_year\")",
							" })",
							" // Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							" pm.test('response have param \"qa_salary_after_1.5_year\"', function () {",
							"     pm.expect(resp).ownProperty(\"qa_salary_after_1.5_year\")",
							" })",
							" // Проверить, что json response имеет параметр person",
							" pm.test('response have param \"person\"', function () {",
							"     pm.expect(resp).ownProperty(\"person\")",
							" })",
							" // Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)",
							" pm.test('response.start_qa_salary = request.salary', function () {",
							"     pm.expect(resp.start_qa_salary).to.eql(+req.salary)",
							" })",
							" // Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)",
							" pm.test('response.qa_salary_after_6_months = request.salary*2', function () {",
							"     pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2)",
							" })",
							" // Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)",
							"  pm.test('response.qa_salary_after_12_months = request.salary*2.7', function () {",
							"     pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7)",
							" })",
							" // Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)",
							"  pm.test('response.qa_salary_after_1.5_year = request.salary*3.3', function () {",
							"     pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3)",
							" })",
							" // Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)",
							"  pm.test('response.qa_salary_after_3.5_years = request.salary*3.8', function () {",
							"     pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8)",
							" })",
							" // Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)",
							" pm.test('response.person.u_name[1] = request.salary', function () {",
							"     pm.expect(resp.person.u_name[1]).to.eql(+req.salary)",
							" })",
							" // Проверить, что параметр u_age равен age из request (age забрать из request)",
							"pm.test('response.u_age = request.age', function () {",
							"    pm.expect(resp.person.u_age).to.eql(+req.age)",
							"})",
							" // Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)",
							" pm.test('response.u_salary_5_years = request.salary*4.2', function () {",
							"     pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2)",
							" })",
							" // ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person",
							"Object.values(resp.person).forEach((el) => {",
							"    console.log(el)",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}